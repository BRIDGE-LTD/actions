name: Java CI with Maven

on:
  push:
    # 分支
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  EC2_USER: ${{ secrets.USER_NAME }}
  EC2_HOST: ${{ secrets.HOST_NAME }}
  SRC_PATH: 'target/*.jar'
  DEST_DIR: '/var/www'
  APP_NAME: 'actions'    # your app name

jobs:
  compile:
    runs-on: ubuntu-latest
    name: Running Java ${{ matrix.java }} compile
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: 缓存 Maven 依赖
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: 编译代码
        run: mvn compile
      - name: Deploy the JAR file to the remote server
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Generate the package
        run: mvn -B package --file pom.xml -Dmaven.test.skip=true
#      - name: 将 JAR 包部署到服务器
#        uses: garygrossgarten/github-action-scp@release
#        env:
#          local: target/actions-0.0.1-SNAPSHOT.jar
#          remote: var/www/actions/actions.jar
#          host: ${{ secrets.HOST_NAME }}
#          username: ${{ secrets.USER_NAME }}
#          #password: ${{ secrets.PASSWORD }}
#          privateKey: ${{ secrets.PRIVATE_KEY }}
#          #host: ${{ secrets.HOST_NAME }}
#          #username: ${{ secrets.USER_NAME }}
      - name: 将 JAR 包部署到服务器
        env:
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          ssh -t -o StrictHostKeyChecking=no -i private_key ${EC2_USER}@${EC2_HOST} "sudo mkdir -p $DEST_DIR/$APP_NAME && sudo chmod -R 777 $DEST_DIR/$APP_NAME"
          scp -i private_key ${SRC_PATH} ${EC2_USER}@${EC2_HOST}:${DEST_DIR}/${APP_NAME}/${APP_NAME}.jar
      - name: 在服务器上执行 java -jar，请确保服务器安装了 JDK
        if: always()
        uses: fifsky/ssh-action@master
        with:
          envs: APP_NAME,DEST_DIR
          command: | # 命令中的 & 表示在后台运行进程
            echo "结束服务"
            pkill -9 -f ${APP_NAME}.jar
            echo "启动服务"
            cd ${DEST_DIR}/${APP_NAME}/
            java -jar ${APP_NAME}.jar &
          host: ${{ secrets.HOST_NAME }}
          user: ${{ secrets.USER_NAME }}
          key: ${{ secrets.PRIVATE_KEY }}
          args: "-tt"
